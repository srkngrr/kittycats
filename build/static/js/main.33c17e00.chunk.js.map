{"version":3,"sources":["components/searchbox/searchbox.component.jsx","components/card/card.component.jsx","components/cardlist/cardlist.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","handleChange","className","type","placeholder","onChange","Card","name","email","alt","src","CardList","cats","map","cat","key","id","App","event","setState","searchField","target","value","state","fetch","then","res","json","users","catch","err","console","log","this","filteredCats","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yTAUeA,G,YANG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,2BAAOC,UAAU,SAASC,KAAK,SAASC,YAAY,iBAAiBC,SAAUJ,MCQlEK,G,MAVF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACpB,OACC,yBAAKN,UAAU,kBACd,yBAAKO,IAAI,UAAUC,IAAG,+BAA0BH,EAA1B,4BACtB,qCAAWA,GACX,wCAAcC,MCSFG,G,MAZE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAClB,OACC,yBAAKV,UAAU,aAEbU,EAAKC,KAAI,SAAAC,GACR,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAIE,GAAIT,KAAMO,EAAIP,KAAMC,MAAOM,EAAIN,cC8B3CS,E,kDAlCb,aAAe,IAAD,8BACZ,gBAcFhB,aAAe,SAACiB,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAd1C,EAAKC,MAAQ,CACXX,KAAM,GACNQ,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACP,KAAMgB,OACnCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAOpB,IAAD,EACuBG,KAAKV,MAA3BX,EADD,EACCA,KAAMQ,EADP,EACOA,YACRc,EAAetB,EAAKuB,QAAO,SAAArB,GAC/B,OAAOA,EAAIP,KAAK6B,cAAcC,SAASjB,EAAYgB,kBAErD,OACE,yBAAKlC,UAAU,OACb,yCACA,kBAAC,EAAD,CAAWD,aAAcgC,KAAKhC,eAC9B,kBAAC,EAAD,CAAUW,KAAMsB,S,GA7BNI,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.33c17e00.chunk.js","sourcesContent":["import React from 'react';\n\nimport './searchbox.styles.css';\n\nconst SearchBox = ({handleChange}) => {\n\treturn(\n\t\t<input className='search' type='search' placeholder='search kitties' onChange={handleChange}/>\n\t)\n}\n\nexport default SearchBox","import React from 'react';\n\nimport './card.styles.css';\n\nconst Card = ({name, email}) => {\n\treturn(\n\t\t<div className='card-container'>\n\t\t\t<img alt='kitties' src={`https://robohash.org/${name}?size=200x200&set=set4`}/>\n\t\t\t<h3>Name: {name}</h3>\n\t\t\t<span>Email: {email}</span>\n\t\t</div>\n\t)\n}\n\nexport default Card","import React from 'react';\n\nimport Card from '../card/card.component';\nimport './cardlist.styles.css';\n\n\nconst CardList = ({cats}) => {\n\treturn(\n\t\t<div className='card-list'>\n\t\t\t{\n\t\t\t\tcats.map(cat => {\n\t\t\t\t\treturn <Card key={cat.id} name={cat.name} email={cat.email}/>\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default CardList","import React from 'react';\nimport './App.css';\n\nimport SearchBox from './components/searchbox/searchbox.component';\nimport CardList from './components/cardlist/cardlist.component';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      cats: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(users => this.setState({cats: users}))\n      .catch(err => console.log(err))\n  }\n\n  handleChange = (event) => {\n    this.setState({ searchField: event.target.value })\n  }\n\n  render() {\n    const { cats, searchField } = this.state;\n    const filteredCats = cats.filter(cat => {\n      return cat.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return (\n      <div className=\"App\">\n        <h1>KittyCats</h1>\n        <SearchBox handleChange={this.handleChange}/>\n        <CardList cats={filteredCats}/>\n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}